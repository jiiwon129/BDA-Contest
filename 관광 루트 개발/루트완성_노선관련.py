# -*- coding: utf-8 -*-
"""루트완성_노선관련.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lnKO6zxK0KLORSa6bfBvWMu8ecyPE0Gk
"""

!apt-get update -qq
!apt-get install -qq libspatialindex-dev

!pip install osmnx folium networkx

from google.colab import drive
drive.mount('/content/drive')

df_url = '/content/drive/MyDrive/관광지.csv'

region_url = '/content/drive/MyDrive/국민여행조사_지역코드2.csv'

infra_url = '/content/drive/MyDrive/교통인프라지수_최종(3).csv'

import pandas as pd

df = pd.read_csv(df_url)

region_code = pd.read_csv(region_url)

infra_df = pd.read_csv(infra_url)

df_filtered = df.copy()
df = df_filtered[~df_filtered['CL_NM'].isin(['정보화마을','항공사/여행사', '영어마을'])].copy()

region_code['시도명']  = region_code['시도명'].str.strip()

region_code = region_code.rename(columns={'지역명.1':'region_name'})

df_filtered = df[['POI_ID','POI_NM','MLSFC_NM', 'CL_NM', 'CTPRVN_NM', 'SIGNGU_NM', 'CL_CD','LC_LO', 'LC_LA','GID_CD']]

df_filtered['SIGNGU_NM'] = df_filtered['SIGNGU_NM'].str.split().str[0]

df_filtered=df_filtered.fillna('세종시')

df_filtered_copy = df_filtered.copy()

region_code['지역 코드'] = region_code['지역 코드'].astype(str).str.zfill(5)

df_filtered_copy = df_filtered_copy.merge(
    region_code[['시도명', '지역명', '지역 코드']],
    left_on=['CTPRVN_NM', 'SIGNGU_NM'],
    right_on=['시도명', '지역명'],
    how='left'
)

df_filtered_copy['시도 코드']   = df_filtered_copy['지역 코드'].str[:2]
df_filtered_copy['시군구 코드'] = df_filtered_copy['지역 코드'].str[2:]

df_filtered_copy['지역 코드']    = df_filtered_copy['지역 코드'].astype(str)
infra_df           ['시군구코드'] = infra_df           ['시군구코드'].astype(str)


df_filtered_copy2 = df_filtered_copy.merge(
    infra_df[['시군구코드','교통인프라지수_norm']],
    left_on  = '지역 코드',
    right_on = '시군구코드',
    how       = 'left'
)

df_filtered_copy2 = df_filtered_copy2.drop(columns=['시군구코드'])

df_filtered_copy2 = df_filtered_copy2.drop('시도명', axis=1)
df_filtered_copy2 = df_filtered_copy2.drop('지역명', axis=1)

missing_rows = df_filtered_copy2[df_filtered_copy2['지역 코드'].isna()]
print(len(missing_rows['SIGNGU_NM'].unique()))

df_filtered_copy2['지역 코드'] = pd.to_numeric(df_filtered_copy2['지역 코드'], errors='coerce')


prov_map = {
    '대구광역시': 22,
    '인천광역시': 23
}

df_filtered_copy2['지역 코드'] = df_filtered_copy2['지역 코드'].fillna(
    df_filtered_copy2['CTPRVN_NM'].map(prov_map)
)

df_filtered_copy2['지역 코드'] = df_filtered_copy2['지역 코드'].astype(int).astype(str).str.zfill(2)


df_filtered_copy2['시도 코드']   = df_filtered_copy2['지역 코드'].str[:2]
df_filtered_copy2['시군구 코드'] = df_filtered_copy2['지역 코드'].str[2:]

df_filtered_copy2['교통인프라지수_norm'] = df_filtered_copy2['교통인프라지수_norm'].fillna('0')

df_filtered_copy2['교통인프라지수_norm'] = df_filtered_copy2['교통인프라지수_norm'].astype(float)

"""# 지역 선정

## 교통 인프라 부족 지역 선정
"""

infra_df.tail(10)

total_sites = df_filtered_copy2.groupby("지역 코드").size()
total_sites

cat_counts = (df_filtered_copy2
              .groupby(["지역 코드","CL_NM"])
              .size()
              .unstack(fill_value=0))

cat_counts.columns

import geopandas as gpd
import pandas as pd
import glob

def load_shp(fp):
    gdf = gpd.read_file(fp, encoding="euc-kr")
    return gdf.rename(columns={
        "ADM_SECT_C": "shp_code",
        "SGG_NM":     "region_name"
    })

shps = glob.glob("/content/drive/MyDrive/geo/SGG_*.shp")
gdfs = [load_shp(p) for p in shps]

regions = gpd.GeoDataFrame(
    pd.concat(gdfs, ignore_index=True),
    crs=gdfs[0].crs
).to_crs(epsg=4326)

region_code = region_code.rename(columns={"지역 코드":"region_code"})
region_code["region_name"] = region_code["region_name"].str.strip()

regions['region_name'] = regions['region_name'].str.strip()
region_code  ['region_name'] = region_code  ['region_name'].str.strip()

kb = region_code[region_code['region_name'].str.startswith('전북특별차지도')]
print(kb[['region_name','region_code']].drop_duplicates().sort_values('region_code'))

regions['region_name'] = (
    regions['region_name']
    .str.split()
    .str[:2]
    .str.join(' ')
)

regions['region_name'] = regions['region_name'] \
    .str.replace(r'^전북특별차지도', '전북특별자치도', regex=True)

regions.loc[
    regions['region_name']=='인천광역시 미추홀구',
    'region_name'
] = '인천광역시 남구'

region_code.loc[
    region_code['region_name']=='경상북도 군위군',
    'region_name'
] = '대구광역시 군위군'

set(regions['region_name']) - set(region_code['region_name'])

regions = regions.merge(
    region_code[["region_name","region_code"]],
    on="region_name",
    how="left"
)

"""## 교통 인프라 보완 지역 선정"""

import geopandas as gpd
from shapely.geometry import Point

sites = df_filtered_copy2.copy()

sites['geometry'] = sites.apply(
    lambda r: Point(r['LC_LO'], r['LC_LA']),
    axis=1
)

sites_gdf = gpd.GeoDataFrame(
    sites,
    geometry='geometry',
    crs="EPSG:4326"
)

regions['centroid']      = regions.geometry.centroid
regions['centroid_lat']  = regions.centroid.y
regions['centroid_lon']  = regions.centroid.x

infra_subset = infra_df.rename(columns={'시군구코드':'region_code'})[
    ['region_code','교통인프라지수_norm']
]

regions = regions.merge(
    infra_subset,
    on='region_code',
    how='left'
)

target_codes = ['36470','38340','37370','33370']
targets = regions[regions['region_code'].isin(target_codes)].copy()

import numpy as np
import pandas as pd
from sklearn.metrics.pairwise import haversine_distances
from sklearn.neighbors import BallTree

coords_rad = np.deg2rad(regions[['centroid_lat', 'centroid_lon']].values)
tree_all = BallTree(coords_rad, metric='haversine')

search_radius_km = 45.0
radius_rad = search_radius_km / 6371.0

results = []

for _, t in targets.iterrows():
    t_rad = np.deg2rad([t.centroid_lat, t.centroid_lon]).reshape(1, -1)
    idxs = tree_all.query_radius(t_rad, r=radius_rad, return_distance=False)[0]

    neigh = regions.iloc[idxs]
    neigh = neigh[neigh['region_code'] != t.region_code]

    if neigh.empty:
        results.append({
            'target_code': t.region_code,
            'target_name': t.region_name,
            'match_code':  None,
            'match_name':  None,
            'distance_km': None,
            'infra_norm':  None
        })
        continue

    neigh_coords_rad = np.deg2rad(neigh[['centroid_lat', 'centroid_lon']].values)
    dists_rad = haversine_distances(t_rad, neigh_coords_rad)[0]
    neigh['distance_km'] = dists_rad * 6371.0

    neigh_sorted = neigh.sort_values(
        by=['교통인프라지수_norm', 'distance_km'],
        ascending=[False, True]
    ).head(5)

    row = {
        'target_code': t.region_code,
        'target_name': t.region_name,
    }
    for i in range(5):
        if i < len(neigh_sorted):
            r = neigh_sorted.iloc[i]
            row[f'match_code_{i+1}'] = r['region_code']
            row[f'match_name_{i+1}'] = r['region_name']
            row[f'distance_km_{i+1}'] = float(r['distance_km'])
            row[f'infra_norm_{i+1}'] = float(r['교통인프라지수_norm'])
        else:
            row[f'match_code_{i+1}'] = None
            row[f'match_name_{i+1}'] = None
            row[f'distance_km_{i+1}'] = None
            row[f'infra_norm_{i+1}'] = None

    results.append(row)

match_top5 = pd.DataFrame(results)
print(match_top5)

sites_with_region = gpd.sjoin(
    sites_gdf,
    regions[['region_code','geometry']],
    how='left',
    predicate='within'
).drop(columns=['index_right'])

print(sites_with_region[['POI_NM','region_code']].head())

"""## 전국 관광지 클러스터링"""

import folium
from folium.plugins import MarkerCluster

m = folium.Map(location=[36.5,127.8], zoom_start=7)

for _, r in match_df.iterrows():
    src = regions[regions['region_code']==r.target_code].iloc[0]
    dst = regions[regions['region_code']==r.match_code].iloc[0]

cluster = MarkerCluster(name="관광지").add_to(m)
for _, s in sites_with_region.iterrows():
    folium.Marker(
        [s.LC_LA, s.LC_LO],
        icon=folium.Icon(icon='star', prefix='fa'),
        tooltip=s.POI_NM
    ).add_to(cluster)

folium.LayerControl().add_to(m)

m

"""## 관심 지역 관광지 클러스터링"""

match_df

import geopandas as gpd
import folium
from folium.plugins import MarkerCluster

regions_single = regions.dissolve(by='region_name', as_index=False)
regions_single['centroid_lat'] = regions_single.geometry.centroid.y
regions_single['centroid_lon'] = regions_single.geometry.centroid.x

custom = {'38340': '38110', '37370': '22020', '36470': '36010', '33370': '33040'}

code_to_name = regions[['region_code', 'region_name']].drop_duplicates().set_index('region_code')['region_name'].to_dict()

m = folium.Map(location=[36.5, 127.8], zoom_start=7)

for src_code, dst_code in custom.items():
    src_name = code_to_name.get(src_code)
    dst_name = code_to_name.get(dst_code)

    if src_name not in regions_single['region_name'].values or dst_name not in regions_single['region_name'].values:
        print(f"{src_code}({src_name}) 또는 {dst_code}({dst_name}) 없음")
        continue

    src = regions_single.loc[regions_single['region_name'] == src_name].iloc[0]
    dst = regions_single.loc[regions_single['region_name'] == dst_name].iloc[0]

    folium.CircleMarker(
        [src.centroid_lat, src.centroid_lon],
        radius=6, color='red', fill=True,
        tooltip=f"소도시: {src.region_name}"
    ).add_to(m)

    folium.CircleMarker(
        [dst.centroid_lat, dst.centroid_lon],
        radius=6, color='blue', fill=True,
        tooltip=f"매칭지역: {dst.region_name}"
    ).add_to(m)

    folium.PolyLine(
        [[src.centroid_lat, src.centroid_lon],
         [dst.centroid_lat, dst.centroid_lon]],
        color='purple', weight=2, opacity=0.7
    ).add_to(m)

cluster = MarkerCluster(name="관광지").add_to(m)
for _, s in sites_with_region.iterrows():
    folium.Marker(
        [s.LC_LA, s.LC_LO],
        icon=folium.Icon(icon='star', prefix='fa'),
        tooltip=s.POI_NM
    ).add_to(cluster)

folium.LayerControl().add_to(m)
m

regions.info()

"""# 관광 루트 선정"""

print(regions['region_code'].dtype)
regions['region_code'] = pd.to_numeric(regions['region_code'], errors='coerce').astype('Int64')

!pip install polyline

"""## 안동, 전주, 대전 경유 루트"""

import osmnx as ox
import networkx as nx
import folium
from shapely.geometry import LineString, Polygon
import math
import gc
import pandas as pd
from google.colab import files

interest_pairs = [
    (38110, 38340),
    (33040, 33370)
]

## must_poi = sites_gdf[sites_gdf.POI_ID == 5565818]

def haversine(lon1, lat1, lon2, lat2):
    R=6371000
    φ1,φ2 = math.radians(lat1), math.radians(lat2)
    Δφ,Δλ = math.radians(lat2-lat1), math.radians(lon2-lon1)
    a = math.sin(Δφ/2)**2 + math.cos(φ1)*math.cos(φ2)*math.sin(Δλ/2)**2
    return 2*R*math.atan2(math.sqrt(a), math.sqrt(1-a))

def load_graph_segment(src, dst, pad_deg=0.2):
    north = max(src.centroid_lat, dst.centroid_lat) + pad_deg
    south = min(src.centroid_lat, dst.centroid_lat) - pad_deg
    east  = max(src.centroid_lon, dst.centroid_lon) + pad_deg
    west  = min(src.centroid_lon, dst.centroid_lon) - pad_deg

    try:
        G = ox.graph_from_bbox((north, south, east, west), network_type="drive")
        if G.edges:
            return G
    except ValueError: pass

    mid_lat = (src.centroid_lat + dst.centroid_lat)/2
    mid_lon = (src.centroid_lon + dst.centroid_lon)/2
    half = haversine(src.centroid_lon, src.centroid_lat,
                     dst.centroid_lon, dst.centroid_lat)/2
    try:
        G = ox.graph_from_point((mid_lat, mid_lon),
                                dist=half+10000,
                                network_type="drive",
                                simplify=True)
        if G.edges:
            return G
    except ValueError: pass

    try:
        G = ox.graph_from_point((mid_lat, mid_lon),
                                dist=half+50000,
                                network_type="drive",
                                simplify=True)
        if G.edges:
            return G
    except ValueError: pass

    return nx.MultiDiGraph()


def build_route(G, src, dst, via_pois=None, weight="travel_time"):
    orig = ox.distance.nearest_nodes(G, src.centroid_lon, src.centroid_lat)
    dest = ox.distance.nearest_nodes(G, dst.centroid_lon, dst.centroid_lat)
    if via_pois is not None and not via_pois.empty:
        via_nodes = [
            ox.distance.nearest_nodes(G, p.geometry.x, p.geometry.y)
            for _, p in via_pois.iterrows()
        ]
        seq = [orig] + via_nodes + [dest]
        full=[]
        for u,v in zip(seq[:-1], seq[1:]):
            seg = nx.shortest_path(G, u, v, weight=weight)
            full.extend(seg[:-1])
        full.append(seq[-1])
        return full
    return nx.shortest_path(G, orig, dest, weight=weight)


def draw_route_map(G, route, src, dst, sites_gdf,
                   via_pois=None, buffer_km=2, iso_time=1800):

    coords = [(G.nodes[n]["x"], G.nodes[n]["y"]) for n in route]
    line = LineString(coords) if len(coords)>1 else Point(coords[0])

    sub = nx.ego_graph(G, route[0], radius=iso_time, distance="travel_time")
    iso_pts = [(G.nodes[n]["x"], G.nodes[n]["y"]) for n in sub.nodes]
    if len(iso_pts)>2:
        iso = Polygon(iso_pts).convex_hull
    elif len(iso_pts)==2:
        iso = LineString(iso_pts).buffer(buffer_km/111)
    else:
        iso = Point(iso_pts[0]).buffer(buffer_km/111)

    corridor = line.buffer(buffer_km/111)
    poi_buf = sites_gdf[sites_gdf.geometry.within(corridor)].copy()
    poi_buf["dist_on_route"] = poi_buf.geometry.apply(lambda p: line.project(p))
    poi_buf.sort_values("dist_on_route", inplace=True)
    poi_iso = sites_gdf[sites_gdf.geometry.within(iso)].copy()

    m = folium.Map(
        location=[(src.centroid_lat+dst.centroid_lat)/2,
                  (src.centroid_lon+dst.centroid_lon)/2],
        zoom_start=9
    )

    if isinstance(line, LineString):
        folium.PolyLine([[y,x] for x,y in line.coords],
                        color="black", weight=3, opacity=0.6).add_to(m)
    folium.GeoJson(iso, style_function=lambda _: {
        "fillColor":"#3186cc","color":"#3186cc","fillOpacity":0.2
    }).add_to(m)

    for city,col in [(src,"red"),(dst,"blue")]:
        folium.CircleMarker(
            [city.centroid_lat, city.centroid_lon],
            radius=6, color=col, fill=True,
            tooltip=city.region_name
        ).add_to(m)

    if via_pois is not None and not via_pois.empty:
        for _,p in via_pois.iterrows():
            folium.Marker(
                [p.geometry.y,p.geometry.x],
                icon=folium.Icon(color="orange", icon="star"),
                tooltip=f"경유: {p.POI_NM}"
            ).add_to(m)

    for _,p in poi_buf.iterrows():
        folium.Marker(
            [p.geometry.y,p.geometry.x],
            icon=folium.Icon(icon="star", prefix="fa"),
            tooltip=p.POI_NM+" (on route)"
        ).add_to(m)
    for _,p in poi_iso.iterrows():
        folium.CircleMarker(
            [p.geometry.y,p.geometry.x],
            radius=4, color="green", fill=True,
            tooltip=p.POI_NM+f" (within {iso_time//60}min)"
        ).add_to(m)

    return m, line


for src_code, dst_code in interest_pairs:
    src = regions.loc[regions.region_code==src_code].iloc[0]
    dst = regions.loc[regions.region_code==dst_code].iloc[0]

    pad = 0.5 if (src_code,dst_code)==(37040,37340) else 0.2
    Gp = load_graph_segment(src, dst, pad_deg=pad)
    if not Gp.edges:
        print(f"Skip {src.region_name}→{dst.region_name}: no edges")
        continue

    Gp = ox.add_edge_speeds(Gp, fallback=30)
    Gp = ox.add_edge_travel_times(Gp)

    if (src_code,dst_code)==(37040,37340):
        route = build_route(Gp, src, dst, via_pois=must_poi)
        buffer_km, iso_time = 5, 3600
        via = must_poi
    else:
        route = build_route(Gp, src, dst)
        buffer_km, iso_time = 2, 1800
        via = None

    m, line = draw_route_map(Gp, route, src, dst, sites_gdf,
                              via_pois=via,
                              buffer_km=buffer_km,
                              iso_time=iso_time)
    display(m)

    corridor = line.buffer(buffer_km/111)
    poi_buf = sites_gdf[sites_gdf.geometry.within(corridor)].copy()
    poi_buf["dist_on_route"] = poi_buf.geometry.apply(lambda p: line.project(p))
    poi_buf.sort_values("dist_on_route", inplace=True)

    poi_buf["src_region"] = src.region_name
    poi_buf["dst_region"] = dst.region_name
    poi_buf["src_code"]   = src_code
    poi_buf["dst_code"]   = dst_code
    poi_buf["lon"] = poi_buf.geometry.x
    poi_buf["lat"] = poi_buf.geometry.y

    cols = ["POI_ID","POI_NM","src_code","dst_code",
            "src_region","dst_region","lon","lat","dist_on_route"]
    fname = f"onroute_{src_code}_{dst_code}.csv"
    poi_buf[cols].to_csv(fname, index=False, encoding="utf-8-sig")
    files.download(fname)

    del Gp, route, m, line, poi_buf
    gc.collect()

"""# 목포 경유 루트"""

import osmnx as ox
import networkx as nx
import folium
from shapely.geometry import LineString, Polygon, Point
import pandas as pd
import math
import gc

interest_pairs = [
    (36010, 36470),  # 목포시 >> 진도군
]


must_poi_ids = [
    1087123,  # 세방낙조전망대
    5565598,  # 운림산방
    5488475,  # 가계해수욕장
    5251,     # 진도신비의바닷길축제
    5574021,  # 진도타워
    4182038,  # 명량해상케이블카
    4395156   # 울돌목 스카이워크
]

must_poi = sites_gdf[sites_gdf.POI_ID.isin(must_poi_ids)]

def haversine(lon1, lat1, lon2, lat2):
    R=6371000
    φ1,φ2 = math.radians(lat1), math.radians(lat2)
    Δφ,Δλ = math.radians(lat2-lat1), math.radians(lon2-lon1)
    a = math.sin(Δφ/2)**2 + math.cos(φ1)*math.cos(φ2)*math.sin(Δλ/2)**2
    return 2*R*math.atan2(math.sqrt(a), math.sqrt(1-a))

def load_graph_segment(src, dst, pad_deg=0.2):
    north = max(src.centroid_lat, dst.centroid_lat) + pad_deg
    south = min(src.centroid_lat, dst.centroid_lat) - pad_deg
    east  = max(src.centroid_lon, dst.centroid_lon) + pad_deg
    west  = min(src.centroid_lon, dst.centroid_lon) - pad_deg

    try:
        G = ox.graph_from_bbox((north, south, east, west), network_type="drive")
        if G.edges:
            return G
    except ValueError: pass

    mid_lat = (src.centroid_lat + dst.centroid_lat)/2
    mid_lon = (src.centroid_lon + dst.centroid_lon)/2
    half = haversine(src.centroid_lon, src.centroid_lat,
                     dst.centroid_lon, dst.centroid_lat)/2
    try:
        G = ox.graph_from_point((mid_lat, mid_lon),
                                dist=half+10000,
                                network_type="drive",
                                simplify=True)
        if G.edges:
            return G
    except ValueError: pass

    try:
        G = ox.graph_from_point((mid_lat, mid_lon),
                                dist=half+50000,
                                network_type="drive",
                                simplify=True)
        if G.edges:
            return G
    except ValueError: pass

    return nx.MultiDiGraph()


def build_route(G, src, dst, via_pois=None, weight="travel_time"):
    orig = ox.distance.nearest_nodes(G, src.centroid_lon, src.centroid_lat)
    dest = ox.distance.nearest_nodes(G, dst.centroid_lon, dst.centroid_lat)
    if via_pois is not None and not via_pois.empty:
        via_nodes = [
            ox.distance.nearest_nodes(G, p.geometry.x, p.geometry.y)
            for _, p in via_pois.iterrows()
        ]
        seq = [orig] + via_nodes + [dest]
        full=[]
        for u,v in zip(seq[:-1], seq[1:]):
            seg = nx.shortest_path(G, u, v, weight=weight)
            full.extend(seg[:-1])
        full.append(seq[-1])
        return full
    return nx.shortest_path(G, orig, dest, weight=weight)

def get_route_pois(G, route, src, dst, sites_gdf, buffer_km=2, iso_time=1800):
    coords = [(G.nodes[n]["x"], G.nodes[n]["y"]) for n in route]
    line = LineString(coords) if len(coords)>1 else Point(coords[0])

    corridor = line.buffer(buffer_km / 111)
    poi_buf = sites_gdf[sites_gdf.geometry.within(corridor)].copy()
    poi_buf["dist_on_route"] = poi_buf.geometry.apply(lambda p: line.project(p))
    poi_buf.sort_values("dist_on_route", inplace=True)
    poi_buf["src_region"] = src.region_name
    poi_buf["dst_region"] = dst.region_name
    poi_buf["type"] = "on_route"

    sub = nx.ego_graph(G, route[0], radius=iso_time, distance="travel_time")
    iso_pts = [(G.nodes[n]["x"], G.nodes[n]["y"]) for n in sub.nodes]
    if len(iso_pts) > 2:
        iso = Polygon(iso_pts).convex_hull
    elif len(iso_pts) == 2:
        iso = LineString(iso_pts).buffer(buffer_km / 111)
    else:
        iso = Point(iso_pts[0]).buffer(buffer_km / 111)

    poi_iso = sites_gdf[sites_gdf.geometry.within(iso)].copy()
    poi_iso["src_region"] = src.region_name
    poi_iso["dst_region"] = dst.region_name
    poi_iso["type"] = "within_iso"

    return poi_buf, poi_iso

def draw_route_map(G, route, src, dst, sites_gdf,
                   via_pois=None, buffer_km=2, iso_time=1800):

    coords = [(G.nodes[n]["x"], G.nodes[n]["y"]) for n in route]
    line = LineString(coords) if len(coords)>1 else Point(coords[0])

    sub = nx.ego_graph(G, route[0], radius=iso_time, distance="travel_time")
    iso_pts = [(G.nodes[n]["x"], G.nodes[n]["y"]) for n in sub.nodes]
    if len(iso_pts)>2:
        iso = Polygon(iso_pts).convex_hull
    elif len(iso_pts)==2:
        iso = LineString(iso_pts).buffer(buffer_km/111)
    else:
        iso = Point(iso_pts[0]).buffer(buffer_km/111)

    corridor = line.buffer(buffer_km/111)
    poi_buf = sites_gdf[sites_gdf.geometry.within(corridor)].copy()
    poi_buf["dist_on_route"] = poi_buf.geometry.apply(lambda p: line.project(p))
    poi_buf.sort_values("dist_on_route", inplace=True)
    poi_iso = sites_gdf[sites_gdf.geometry.within(iso)].copy()


    m = folium.Map(
        location=[(src.centroid_lat+dst.centroid_lat)/2,
                  (src.centroid_lon+dst.centroid_lon)/2],
        zoom_start=9
    )

    if isinstance(line, LineString):
        folium.PolyLine([[y,x] for x,y in line.coords],
                        color="black", weight=3, opacity=0.6).add_to(m)
    folium.GeoJson(iso, style_function=lambda _: {
        "fillColor":"#3186cc","color":"#3186cc","fillOpacity":0.2
    }).add_to(m)

    for city,col in [(src,"red"),(dst,"blue")]:
        folium.CircleMarker(
            [city.centroid_lat, city.centroid_lon],
            radius=6, color=col, fill=True,
            tooltip=city.region_name
        ).add_to(m)

    if via_pois is not None and not via_pois.empty:
        for _,p in via_pois.iterrows():
            folium.Marker(
                [p.geometry.y,p.geometry.x],
                icon=folium.Icon(color="orange", icon="star"),
                tooltip=f"경유: {p.POI_NM}"
            ).add_to(m)

    for _,p in poi_buf.iterrows():
        folium.Marker(
            [p.geometry.y,p.geometry.x],
            icon=folium.Icon(icon="star", prefix="fa"),
            tooltip=p.POI_NM+" (on route)"
        ).add_to(m)
    for _,p in poi_iso.iterrows():
        folium.CircleMarker(
            [p.geometry.y,p.geometry.x],
            radius=4, color="green", fill=True,
            tooltip=p.POI_NM+f" (within {iso_time//60}min)"
        ).add_to(m)
    return m

all_pois = []


for src_code, dst_code in interest_pairs:
    src = regions.loc[regions.region_code == src_code].iloc[0]
    dst = regions.loc[regions.region_code == dst_code].iloc[0]

    pad = 0.5 if (src_code, dst_code) == (37040, 37340) else 0.2
    Gp = load_graph_segment(src, dst, pad_deg=pad)
    if not Gp.edges:
        print(f"Skip {src.region_name}→{dst.region_name}: no edges")
        continue

    Gp = ox.add_edge_speeds(Gp, fallback=30)
    Gp = ox.add_edge_travel_times(Gp)

    north = max(src.centroid_lat, dst.centroid_lat) + pad
    south = min(src.centroid_lat, dst.centroid_lat) - pad
    east  = max(src.centroid_lon, dst.centroid_lon) + pad
    west  = min(src.centroid_lon, dst.centroid_lon) - pad

    relevant_must = must_poi.cx[west:east, south:north].copy()


    route = build_route(
        Gp, src, dst,
        via_pois=relevant_must,
        weight="travel_time"
    )

    m = draw_route_map(Gp, route, src, dst, sites_gdf,
                       via_pois=(must_poi if (src_code, dst_code)==(37040,37340) else None),
                       buffer_km=5, iso_time=3600)
    display(m)

    poi_buf, poi_iso = get_route_pois(Gp, route, src, dst,
                                      sites_gdf,
                                      buffer_km=5,
                                      iso_time=3600)
    all_pois.extend([poi_buf, poi_iso])

    del Gp, route, m, poi_buf, poi_iso
    gc.collect()

poidata = pd.concat(all_pois, ignore_index=True)
poidata = poidata.drop_duplicates(subset=["POI_ID", "src_region", "dst_region", "type"])

print(poidata.head())

poidata.to_csv("selected_tourist_sites.csv", index=False)

from google.colab import files

poidata.to_csv("onroute_36010_36470.csv", index=False, encoding="utf-8-sig")

files.download("onroute_36010_36470.csv")

import osmnx as ox
import networkx as nx
import folium
from shapely.geometry import LineString, Polygon, Point
import math
import gc
import pandas as pd
import geopandas as gpd  # CHANGED: 좌표계 처리용
from google.colab import files

interest_pairs = [
    (22020, 37370)
]

def haversine(lon1, lat1, lon2, lat2):
    R=6371000
    φ1,φ2 = math.radians(lat1), math.radians(lat2)
    Δφ,Δλ = math.radians(lat2-lat1), math.radians(lon2-lon1)
    a = math.sin(Δφ/2)**2 + math.cos(φ1)*math.cos(φ2)*math.sin(Δλ/2)**2
    return 2*R*math.atan2(math.sqrt(a), math.sqrt(1-a))

def ensure_wgs84(gdf):
    """CHANGED: sites_gdf에 CRS 없으면 WGS84로 가정, 있으면 WGS84로 통일"""
    if gdf.crs is None:
        return gpd.GeoDataFrame(gdf, geometry=gdf.geometry, crs="EPSG:4326")
    return gdf.to_crs("EPSG:4326")

def load_graph_segment(src, dst, pad_deg=0.2):
    north = max(src.centroid_lat, dst.centroid_lat) + pad_deg
    south = min(src.centroid_lat, dst.centroid_lat) - pad_deg
    east  = max(src.centroid_lon, dst.centroid_lon) + pad_deg
    west  = min(src.centroid_lon, dst.centroid_lon) - pad_deg

    try:
        G = ox.graph_from_bbox(north, south, east, west, network_type="drive")
        if G.number_of_edges() > 0:
            return G
    except Exception:
        pass

    mid_lat = (src.centroid_lat + dst.centroid_lat)/2
    mid_lon = (src.centroid_lon + dst.centroid_lon)/2
    half = haversine(src.centroid_lon, src.centroid_lat,
                     dst.centroid_lon, dst.centroid_lat)/2
    try:
        G = ox.graph_from_point((mid_lat, mid_lon),
                                dist=half+10000,
                                network_type="drive",
                                simplify=True)
        if G.number_of_edges() > 0:
            return G
    except Exception:
        pass

    try:
        G = ox.graph_from_point((mid_lat, mid_lon),
                                dist=half+50000,
                                network_type="drive",
                                simplify=True)
        if G.number_of_edges() > 0:
            return G
    except Exception:
        pass

    return nx.MultiDiGraph()

def build_route(G, src, dst, via_pois=None, weight="travel_time"):
    orig = ox.distance.nearest_nodes(G, src.centroid_lon, src.centroid_lat)
    dest = ox.distance.nearest_nodes(G, dst.centroid_lon, dst.centroid_lat)
    if via_pois is not None and not via_pois.empty:
        via_nodes = [
            ox.distance.nearest_nodes(G, p.geometry.x, p.geometry.y)
            for _, p in via_pois.iterrows()
        ]
        seq = [orig] + via_nodes + [dest]
        full=[]
        for u,v in zip(seq[:-1], seq[1:]):
            seg = nx.shortest_path(G, u, v, weight=weight)
            full.extend(seg[:-1])
        full.append(seq[-1])
        return full
    return nx.shortest_path(G, orig, dest, weight=weight)

def draw_route_map(G, route, src, dst, sites_gdf,
                   via_pois=None, buffer_km=5, iso_time=1800):

    coords = [(G.nodes[n]["x"], G.nodes[n]["y"]) for n in route]
    line_wgs = LineString(coords) if len(coords)>1 else Point(coords[0])

    G_proj = ox.project_graph(G)
    proj_crs = G_proj.graph.get("crs", None)

    route_xy_proj = [(G_proj.nodes[n]["x"], G_proj.nodes[n]["y"]) for n in route]
    line_proj = LineString(route_xy_proj) if len(route_xy_proj)>1 else Point(route_xy_proj[0])

    sites_wgs = ensure_wgs84(sites_gdf)
    sites_proj = sites_wgs.to_crs(proj_crs)

    buffer_m = buffer_km * 1000.0
    corridor_proj = line_proj.buffer(buffer_m)

    sub = nx.ego_graph(G_proj, route[0], radius=iso_time, distance="travel_time")
    iso_pts_proj = [(G_proj.nodes[n]["x"], G_proj.nodes[n]["y"]) for n in sub.nodes]
    if len(iso_pts_proj)>2:
        iso_proj = Polygon(iso_pts_proj).convex_hull
    elif len(iso_pts_proj)==2:
        iso_proj = LineString(iso_pts_proj).buffer(buffer_m)
    else:
        iso_proj = Point(iso_pts_proj[0]).buffer(buffer_m)

    poi_buf_proj = sites_proj[sites_proj.geometry.within(corridor_proj)].copy()
    if isinstance(line_proj, LineString):
        poi_buf_proj["dist_on_route_m"] = poi_buf_proj.geometry.apply(lambda p: line_proj.project(p))
        poi_buf_proj.sort_values("dist_on_route_m", inplace=True)

    poi_iso_proj = sites_proj[sites_proj.geometry.within(iso_proj)].copy()

    poi_buf = poi_buf_proj.to_crs("EPSG:4326")
    poi_iso = poi_iso_proj.to_crs("EPSG:4326")

    iso_wgs = gpd.GeoSeries([iso_proj], crs=proj_crs).to_crs("EPSG:4326").iloc[0]

    m = folium.Map(
        location=[(src.centroid_lat+dst.centroid_lat)/2,
                  (src.centroid_lon+dst.centroid_lon)/2],
        zoom_start=9
    )

    if isinstance(line_wgs, LineString):
        folium.PolyLine([[y,x] for x,y in line_wgs.coords],
                        color="black", weight=3, opacity=0.6).add_to(m)

    folium.GeoJson(iso_wgs, style_function=lambda _: {
        "fillColor":"#3186cc","color":"#3186cc","fillOpacity":0.2
    }).add_to(m)

    for city,col in [(src,"red"),(dst,"blue")]:
        folium.CircleMarker(
            [city.centroid_lat, city.centroid_lon],
            radius=6, color=col, fill=True,
            tooltip=city.region_name
        ).add_to(m)

    if via_pois is not None and not via_pois.empty:
        via_wgs = ensure_wgs84(via_pois)
        for _,p in via_wgs.iterrows():
            folium.Marker(
                [p.geometry.y,p.geometry.x],
                icon=folium.Icon(color="orange", icon="star"),
                tooltip=f"경유: {getattr(p, 'POI_NM', 'POI')}"
            ).add_to(m)

    for _,p in poi_buf.iterrows():
        folium.Marker(
            [p.geometry.y,p.geometry.x],
            icon=folium.Icon(icon="star", prefix="fa"),
            tooltip=f"{getattr(p,'POI_NM','POI')} (on route)"
        ).add_to(m)

    for _,p in poi_iso.iterrows():
        folium.CircleMarker(
            [p.geometry.y,p.geometry.x],
            radius=4, color="green", fill=True,
            tooltip=f"{getattr(p,'POI_NM','POI')} (within {iso_time//60}min)"
        ).add_to(m)

    return m, line_proj, poi_buf

for src_code, dst_code in interest_pairs:
    src = regions.loc[regions.region_code==src_code].iloc[0]
    dst = regions.loc[regions.region_code==dst_code].iloc[0]

    pad = 0.5 if (src_code,dst_code)==(37040,37340) else 0.2
    Gp = load_graph_segment(src, dst, pad_deg=pad)
    if Gp.number_of_edges() == 0:
        print(f"Skip {src.region_name}→{dst.region_name}: no edges")
        continue

    Gp = ox.add_edge_speeds(Gp, fallback=30)
    Gp = ox.add_edge_travel_times(Gp)

    if (src_code,dst_code)==(37040,37340):
        route = build_route(Gp, src, dst, via_pois=must_poi)
        buffer_km, iso_time = 5, 3600
        via = must_poi
    else:
        route = build_route(Gp, src, dst)
        buffer_km, iso_time = 5, 1800
        via = None

    m, line_proj, poi_buf = draw_route_map(
        Gp, route, src, dst, sites_gdf,
        via_pois=via, buffer_km=buffer_km, iso_time=iso_time
    )
    display(m)

    poi_buf = poi_buf.copy()
    poi_buf["src_region"] = src.region_name
    poi_buf["dst_region"] = dst.region_name
    poi_buf["src_code"]   = src_code
    poi_buf["dst_code"]   = dst_code
    poi_buf["lon"] = poi_buf.geometry.x
    poi_buf["lat"] = poi_buf.geometry.y

    if "dist_on_route_m" not in poi_buf.columns and isinstance(line_proj, LineString):
        poi_buf["dist_on_route_m"] = 0.0

    cols = ["POI_ID","POI_NM","src_code","dst_code",
            "src_region","dst_region","lon","lat","dist_on_route_m"]

    cols_exist = [c for c in cols if c in poi_buf.columns]
    fname = f"onroute_{src_code}_{dst_code}.csv"
    poi_buf[cols_exist].to_csv(fname, index=False, encoding="utf-8-sig")
    files.download(fname)

    del Gp, route, m, line_proj, poi_buf
    gc.collect()

"""## 노선도 표시"""

import osmnx as ox
import networkx as nx
import folium
from shapely.geometry import LineString, Polygon, Point
import math
import gc
import pandas as pd
from google.colab import files

interest_pairs = [
    (33040, 33370)
]

def haversine(lon1, lat1, lon2, lat2):
    R=6371000
    φ1,φ2 = math.radians(lat1), math.radians(lat2)
    Δφ,Δλ = math.radians(lat2-lat1), math.radians(lon2-lon1)
    a = math.sin(Δφ/2)**2 + math.cos(φ1)*math.cos(φ2)*math.sin(Δλ/2)**2
    return 2*R*math.atan2(math.sqrt(a), math.sqrt(1-a))

def load_graph_segment(src, dst, pad_deg=0.2):
    north = max(src.centroid_lat, dst.centroid_lat) + pad_deg
    south = min(src.centroid_lat, dst.centroid_lat) - pad_deg
    east  = max(src.centroid_lon, dst.centroid_lon) + pad_deg
    west  = min(src.centroid_lon, dst.centroid_lon) - pad_deg

    try:
        G = ox.graph_from_bbox((north, south, east, west), network_type="drive")
        if G.edges:
            return G
    except ValueError:
        pass

    mid_lat = (src.centroid_lat + dst.centroid_lat)/2
    mid_lon = (src.centroid_lon + dst.centroid_lon)/2
    half = haversine(src.centroid_lon, src.centroid_lat,
                     dst.centroid_lon, dst.centroid_lat)/2
    try:
        G = ox.graph_from_point((mid_lat, mid_lon),
                                dist=half+10000,
                                network_type="drive",
                                simplify=True)
        if G.edges:
            return G
    except ValueError:
        pass

    try:
        G = ox.graph_from_point((mid_lat, mid_lon),
                                dist=half+50000,
                                network_type="drive",
                                simplify=True)
        if G.edges:
            return G
    except ValueError:
        pass

    return nx.MultiDiGraph()

def build_route(G, src, dst, via_pois=None, weight="travel_time"):
    orig = ox.distance.nearest_nodes(G, src.centroid_lon, src.centroid_lat)
    dest = ox.distance.nearest_nodes(G, dst.centroid_lon, dst.centroid_lat)
    if via_pois is not None and not via_pois.empty:
        via_nodes = [
            ox.distance.nearest_nodes(G, p.geometry.x, p.geometry.y)
            for _, p in via_pois.iterrows()
        ]
        seq = [orig] + via_nodes + [dest]
        full=[]
        for u,v in zip(seq[:-1], seq[1:]):
            seg = nx.shortest_path(G, u, v, weight=weight)
            full.extend(seg[:-1])
        full.append(seq[-1])
        return full
    return nx.shortest_path(G, orig, dest, weight=weight)

def draw_route_map(G, route, src, dst, sites_gdf,
                   via_pois=None, buffer_km=2, iso_time=1800):

    coords = [(G.nodes[n]["x"], G.nodes[n]["y"]) for n in route]
    line = LineString(coords) if len(coords)>1 else Point(coords[0])

    sub = nx.ego_graph(G, route[0], radius=iso_time, distance="travel_time")
    iso_pts = [(G.nodes[n]["x"], G.nodes[n]["y"]) for n in sub.nodes]
    if len(iso_pts)>2:
        iso = Polygon(iso_pts).convex_hull
    elif len(iso_pts)==2:
        iso = LineString(iso_pts).buffer(buffer_km/111)
    else:
        iso = Point(iso_pts[0]).buffer(buffer_km/111)

    corridor = line.buffer(buffer_km/111)
    poi_buf = sites_gdf[sites_gdf.geometry.within(corridor)].copy()
    poi_buf["dist_on_route"] = poi_buf.geometry.apply(lambda p: line.project(p))
    poi_buf.sort_values("dist_on_route", inplace=True)
    poi_iso = sites_gdf[sites_gdf.geometry.within(iso)].copy()

    m = folium.Map(
        location=[(src.centroid_lat+dst.centroid_lat)/2,
                  (src.centroid_lon+dst.centroid_lon)/2],
        zoom_start=9
    )

    if isinstance(line, LineString):
        folium.PolyLine([[y,x] for x,y in line.coords],
                        color="black", weight=3, opacity=0.6).add_to(m)
    folium.GeoJson(iso, style_function=lambda _: {
        "fillColor":"#3186cc","color":"#3186cc","fillOpacity":0.2
    }).add_to(m)

    for city,col in [(src,"red"),(dst,"blue")]:
        folium.CircleMarker(
            [city.centroid_lat, city.centroid_lon],
            radius=6, color=col, fill=True,
            tooltip=city.region_name
        ).add_to(m)

    if via_pois is not None and not via_pois.empty:
        for _,p in via_pois.iterrows():
            folium.Marker(
                [p.geometry.y,p.geometry.x],
                icon=folium.Icon(color="orange", icon="star"),
                tooltip=f"경유: {p.POI_NM}"
            ).add_to(m)

    for _,p in poi_buf.iterrows():
        folium.Marker(
            [p.geometry.y,p.geometry.x],
            icon=folium.Icon(icon="star", prefix="fa"),
            tooltip=p.POI_NM+" (on route)"
        ).add_to(m)
    for _,p in poi_iso.iterrows():
        folium.CircleMarker(
            [p.geometry.y,p.geometry.x],
            radius=4, color="green", fill=True,
            tooltip=p.POI_NM+f" (within {iso_time//60}min)"
        ).add_to(m)

    return m, line, iso

for src_code, dst_code in interest_pairs:
    src = regions.loc[regions.region_code==src_code].iloc[0]
    dst = regions.loc[regions.region_code==dst_code].iloc[0]

    pad = 0.5 if (src_code,dst_code)==(37040,37340) else 0.2
    Gp = load_graph_segment(src, dst, pad_deg=pad)
    if not Gp.edges:
        print(f"Skip {src.region_name}→{dst.region_name}: no edges")
        continue

    Gp = ox.add_edge_speeds(Gp, fallback=30)
    Gp = ox.add_edge_travel_times(Gp)

    if (src_code,dst_code)==(37040,37340):
        route = build_route(Gp, src, dst, via_pois=must_poi)
        buffer_km, iso_time = 5, 3600
        via = must_poi
    else:
        route = build_route(Gp, src, dst)
        buffer_km, iso_time = 2, 1800
        via = None

    m, line, iso = draw_route_map(Gp, route, src, dst, sites_gdf,
                                  via_pois=via,
                                  buffer_km=buffer_km,
                                  iso_time=iso_time)
    display(m)

    corridor = line.buffer(buffer_km/111)
    poi_buf = sites_gdf[sites_gdf.geometry.within(corridor)].copy()
    poi_buf["dist_on_route"] = poi_buf.geometry.apply(lambda p: line.project(p))
    poi_buf.sort_values("dist_on_route", inplace=True)
    poi_buf["src_region"] = src.region_name
    poi_buf["dst_region"] = dst.region_name
    poi_buf["src_code"]   = src_code
    poi_buf["dst_code"]   = dst_code
    poi_buf["lon"] = poi_buf.geometry.x
    poi_buf["lat"] = poi_buf.geometry.y
    poi_buf["category"] = "on_route"

    cols_on = ["POI_ID","POI_NM","src_code","dst_code",
               "src_region","dst_region","lon","lat",
               "dist_on_route","category"]
    fname_on = f"onroute_{src_code}_{dst_code}.csv"
    poi_buf[cols_on].to_csv(fname_on, index=False, encoding="utf-8-sig")
    files.download(fname_on)

    poi_iso = sites_gdf[sites_gdf.geometry.within(iso)].copy()
    poi_iso["src_region"] = src.region_name
    poi_iso["dst_region"] = dst.region_name
    poi_iso["src_code"]   = src_code
    poi_iso["dst_code"]   = dst_code
    poi_iso["lon"] = poi_iso.geometry.x
    poi_iso["lat"] = poi_iso.geometry.y

    poi_iso["dist_on_route"] = pd.NA
    poi_iso["category"] = "within_iso"

    cols_iso = ["POI_ID","POI_NM","src_code","dst_code",
                "src_region","dst_region","lon","lat",
                "dist_on_route","category"]
    fname_iso = f"withiniso_{src_code}_{dst_code}.csv"
    poi_iso[cols_iso].to_csv(fname_iso, index=False, encoding="utf-8-sig")
    files.download(fname_iso)

    combo = pd.concat([poi_buf[cols_on], poi_iso[cols_iso]], ignore_index=True)
    combo.sort_values(by=["category","POI_ID"], inplace=True,
                      key=lambda s: s.map({"on_route":0,"within_iso":1}) if s.name=="category" else s)
    combo = combo.drop_duplicates(subset=["POI_ID"], keep="first")
    fname_all = f"all_pois_{src_code}_{dst_code}.csv"
    combo.to_csv(fname_all, index=False, encoding="utf-8-sig")
    files.download(fname_all)

    del Gp, route, m, line, poi_buf, poi_iso, combo, iso
    gc.collect()

"""## 노선만 표시된 지도"""

route_1 = pd.read_csv('/content/drive/MyDrive/onroute_22020_37370.csv')
route_2 = pd.read_csv('/content/drive/MyDrive/onroute_33040_33370.csv')
route_3 = pd.read_csv('/content/drive/MyDrive/onroute_38110_38340.csv')
#route_4 = pd.read_csv('/content/drive/MyDrive/onroute_2202_37370.csv')

"""# 대구 -- 고령"""

route_1 = pd.read_csv('/content/drive/MyDrive/onroute_22020_37370.csv')

"""# 청주 -- 음성"""



"""# 창원 -- 고성"""



"""# 목포 -- 진도"""

